{"diagram":"ClassDiagram","nodes":[{"methods":"","name":"Stop","x":580,"y":920,"attributes":"","id":0,"type":"ClassNode"},{"methods":"","name":"Straight","x":910,"y":910,"attributes":"","id":1,"type":"ClassNode"},{"methods":"+ returnCardType():CardType","name":"Card","x":390,"y":350,"attributes":"- aCardType : String","id":15,"type":"ClassNode"},{"methods":"","name":"<enum>\nDieValue","x":2020,"y":780,"attributes":"ONE\nTWO\nTHREE\nFOUR\nFIVE\nSIX","id":2,"type":"ClassNode"},{"methods":"","name":"Bonus","x":750,"y":920,"attributes":"aBonus : int","id":3,"type":"ClassNode"},{"methods":"","name":"PlusMinus","x":440,"y":920,"attributes":"","id":4,"type":"ClassNode"},{"methods":"+ shuffle()\n+ refresh()\n+ cardsLeft() : int\n+ IsEmpty() : boolean\n+ draw() : Card ","name":"Deck","x":720,"y":310,"attributes":"- aCards : List<Card>\n- aDiscardedCards : List<Card>","id":16,"type":"ClassNode"},{"methods":"+ playGame()\n+ setParser()\n- playTurn()\n- printTableau()\n- aPlayerHasWon():boolean\n- determineWinner():boolean","name":"Game","x":1200,"y":20,"attributes":"- aPlayers: List<String>\n- aWinCondition : int\n- aDeck : Deck\n- aTableau : Tableau\n- aParser : InputParser","id":11,"type":"ClassNode"},{"methods":"","name":"Cloverleaf","x":830,"y":1000,"attributes":"numAchievedTuttos : int","id":5,"type":"ClassNode"},{"methods":"+ moveDie(DieValue)\n+ rollRemaining()\n+ refresh()\n+ returnCombos():List<DiceCombo>\n+ returnMaximalCombos():List<DiceCombo>\n- getDieValueCount():HashMap<DieValue, Integer>\n- isEmpty():boolean\n+ getSizeLeft():int\n+ getSize():int","name":"DiceSet","x":1510,"y":720,"attributes":"- aDiceRemaining : List<Die>\n- aDiceUsed : List<Die>\n- N_DIE : int\n- DICE_SETS : DiceSet[1]\n- DICE_SETS_DEBUG : DiceSet[1]","id":18,"type":"ClassNode"},{"methods":"","name":"Fireworks","x":500,"y":1000,"attributes":"","id":6,"type":"ClassNode"},{"methods":"+ getFreshRuleset():Ruleset","name":"<enum>\nCardType","x":410,"y":480,"attributes":"- aRuleset : Ruleset\n\nBONUS200\nBONUS300\nBONUS400\nBONUS500\nBONUS600\nSTOP\nCLOVERLEAF\nFIREWORKS\nPLUSMINUS\nSTRAIGHT\nX2","id":13,"type":"ClassNode"},{"methods":"+ clone()\n+ returnName():String\n+ explainRules():String\n+ setValidCombos()\n+ removeValidCombo(DiceCombo):List<DiceCombo>\n+ returnValidCombos():List<DiceCombo>\n+ sumUpPoints(List<DiceCombo>):int\n+ handleTutto(int):int\n+ handleNull(int):int","name":"Ruleset <Abstract class>","x":650,"y":520,"attributes":"# aValidCombos : List<DiceCombo>","id":14,"type":"ClassNode"},{"methods":"+ add(String)\n+ getPoints(String):int\n+ update(String, int)\n+ decrease(String):HashMap<String, List<Integer>>\n+ aPlayerHasWon(int):boolean\n+ printTableau()\n+ size():int","name":"Tableau","x":690,"y":30,"attributes":"- aTableau : HashMap<Sting, Integer>","id":10,"type":"ClassNode"},{"methods":"askNumberPlayers() : String\naskWinCondition() : int\naskDisplayScore() : boolean\naskStopAfterTutto() : boolean\naskStop() : boolean\naskKeepRemoving() : boolean\naskWhichRemoving(List<DiceCombo>) : DiceCombo\naskWhichRemove(List<DiceCombo>):DiceCombo","name":"InputParser","x":1650,"y":80,"id":7,"type":"InterfaceNode"},{"methods":"+ returnCounts():HashMap<DieValue, Integer>\n+ returnTriplet(DieValue):DiceCombo\n+ returnPoints():int\n+ iterator():DieValue","name":"<enum>\nDiceCombo","x":1160,"y":740,"attributes":"TRIPLET_ONE\nTRIPLET_SIX\nTRIPLET_FIVE\nTRIPLET_FOUR\nTRIPLET_THREE\nTRIPLET_TWO\nSINGLE_ONE\nSINGLE_FIVE\nSINGLE_TWO\nSINGLE_THREE\nSINGLE_FOUR\nSINGLE_SIX","id":17,"type":"ClassNode"},{"methods":"+ rollDie()\n+ getDieValue():DieValue","name":"Die","x":1840,"y":800,"attributes":"# rand : Random\n- aDieValue : DieValue\n- aDebug : boolean","id":19,"type":"ClassNode"},{"methods":"- askYesNo(String, String) : boolean\n- askRollDisplay(String, String) : boolean\n- askInteger(String, String, int) : int","name":"DefaultParser","x":1660,"y":320,"attributes":"- aScanner : Scanner\n- aPrintStream : PrintStream","id":8,"type":"ClassNode"},{"methods":"","name":"x2","x":670,"y":1000,"attributes":"","id":9,"type":"ClassNode"},{"methods":"+ setParser(InputParser)\n+ setDiceSet(DiceSet)\n+ playRound():int\n- endTurn():int\n- returnRemovableDiceCombos():List<DiceCombo>\n- rollIsNull():boolean\n+ drawNewCard():boolean\n+ decreasePoints():boolean\n+ isNull():boolean\n+ isTutto():boolean","name":"Round","x":1140,"y":310,"attributes":"- aDiceSet : DiceSet\n- aCurrentRuleset : Ruleset\n- aRolledDiceCombos : List<DiceCombo>\n- InputParser : InputParser\n\n- aNeedsNewRuleset : boolean\n- aDecrease : boolean\n- aIsNulll : boolean\n- aIsTutto : boolean\n- aMustContinue : boolean\n- aMustRemoveAll : boolean","id":12,"type":"ClassNode"}],"edges":[{"startLabel":"","middleLabel":"","start":11,"end":16,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":16,"end":15,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":18,"end":19,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":19,"directionality":"Unspecified","end":2,"endLabel":"","type":"AssociationEdge"},{"Generalization Type":"Implementation","start":4,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":0,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":6,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":9,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":3,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":5,"end":14,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":1,"end":14,"type":"GeneralizationEdge"},{"startLabel":"","middleLabel":"","start":12,"end":18,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":12,"end":14,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":17,"directionality":"Unspecified","end":14,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":14,"directionality":"Unspecified","end":13,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":15,"end":13,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"Generalization Type":"Implementation","start":8,"end":7,"type":"GeneralizationEdge"},{"startLabel":"","middleLabel":"","start":11,"end":10,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":17,"directionality":"Unspecified","end":12,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":11,"end":12,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":11,"end":8,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":12,"end":8,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":18,"directionality":"Unspecified","end":17,"endLabel":"","type":"AssociationEdge"}],"version":"3.4"}
