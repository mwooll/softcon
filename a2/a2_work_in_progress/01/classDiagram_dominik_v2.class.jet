{"diagram":"ClassDiagram","nodes":[{"methods":"playGame()\nplayTurn()\naPlayerHasWon():boolean\ndetermineWinner():boolean","name":"Game","x":1200,"y":20,"attributes":"- N_PLAYERS : int\n- WIN_CONDITION : int\n- aDeck : Deck\n- aDiscardPile : DiscardPile\n- aTableau : Tableau\n- aParser : InputParser","id":2,"type":"ClassNode"},{"methods":"returnCardType():CardType","name":"Card","x":390,"y":350,"attributes":"- aCardType : String","id":19,"type":"ClassNode"},{"methods":"add(String)\nget(String):int\nupdate(String, int)\ndecrease()\naPlayerHasWon(int):boolean\nprintTableau()\nannounceWinner()\nsize():int","name":"Tableau","x":690,"y":30,"attributes":"- aTableau : HashMap<Sting, Integer>","id":1,"type":"ClassNode"},{"methods":"","name":"PlusMinus","x":440,"y":920,"attributes":"","id":3,"type":"ClassNode"},{"methods":"askDisplayScore()\naskStopAfterTutto()\naskStop()\naskKeepRemoving()\naskWhichRemove(List<DiceCombo>):DiceCombo","name":"InputParser","x":1700,"y":220,"id":15,"type":"InterfaceNode"},{"methods":"","name":"Fireworks","x":500,"y":1000,"attributes":"","id":4,"type":"ClassNode"},{"methods":"","name":"x2","x":670,"y":1000,"attributes":"","id":5,"type":"ClassNode"},{"methods":"returnName():String\nexplainRules():String\nsetValidCombos()\nremoveValidCombo(DiceCombo):List<DiceCombo>\nreturnValidCombos():List<DiceCombo>\nsumUpPoints(List<DiceCombo>):int\nhandleTutto(int):int","name":"Ruleset <Abstract class>","x":650,"y":520,"attributes":"# aValidCombos : List<DiceCombo>","id":0,"type":"ClassNode"},{"methods":"","name":"Bonus","x":750,"y":920,"attributes":"aBonus : int","id":7,"type":"ClassNode"},{"methods":"","name":"<enum>\nDieValue","x":2020,"y":780,"attributes":"ONE\nTWO\nTHREE\nFOUR\nFIVE\nSIX","id":14,"type":"ClassNode"},{"methods":"add(Card):void\npeek():Card -- [might be needed to check what the last card was]\ngetSize():int\nisEmpty():boolean","name":"DiscardPile","x":620,"y":390,"attributes":"","id":17,"type":"ClassNode"},{"methods":"getRuleset():Ruleset","name":"<enum>\nCardType","x":410,"y":470,"attributes":"- aRuleset : Ruleset\n\nBONUS200\nBONUS300\nBONUS400\nBONUS500\nBONUS600\nSTOP\nCLOVERLEAF\nFIREWORKS\nPLUSMINUS\nSTRAIGHT\nX2","id":20,"type":"ClassNode"},{"methods":"","name":"Straight","x":910,"y":910,"attributes":"","id":9,"type":"ClassNode"},{"methods":"+ setParser(InputParser)\n+ setDiceSet(DiceSet)\n+ playRound():int\n- returnRemovableDiceCombos():List<DiceCombo>\n- rollIsNull():boolean\n+ drawNewCard():boolean\n+ decreasePoints():boolean\n+ isNull():boolean\n+ isTutto():boolean","name":"Round","x":1140,"y":310,"attributes":"- aDiceSet : DiceSet\n- aCurrentRuleset : Ruleset\n- aRolledDiceCombos : List<DiceCombo>\n- InputParser : InputParser\n\n- aNeedsNewRuleset : boolean\n- aDecrease : boolean\n- aIsNulll : boolean\n- aIsTutto : boolean\n- aMustContinue : boolean\n- aMustRemoveAll : boolean","id":10,"type":"ClassNode"},{"methods":"IsEmpty():boolean\ndraw():Card ","name":"Deck","x":740,"y":310,"attributes":"","id":18,"type":"ClassNode"},{"methods":"- askYesNo(String, String):boolean\n- askRollDisplay(String, String):boolean\n+ askDisplayScore():boolean\n+ askStopAfterTutto():boolean\n+ askStop():boolean\n+ askKeepRemoving():boolean\n+ askWhichRemove(List<DiceCombo>):DiceCombo","name":"DefaultParser","x":1700,"y":390,"attributes":"- aScanner : Scanner\n- aPrintStream : PrintStream","id":16,"type":"ClassNode"},{"methods":"returnCounts():HashMap<DieValue, Integer>\nreturnPoints():int\niterator():DieValue","name":"<enum>\nDiceCombo","x":1150,"y":750,"attributes":"TRIPLET_ONE\nTRIPLET_SIX\nTRIPLET_FIVE\nTRIPLET_FOUR\nTRIPLET_THREE\nTRIPLET_TWO\nSINGLE_ONE\nSINGLE_FIVE\nSINGLE_TWO\nSINGLE_THREE\nSINGLE_FOUR\nSINGLE_SIX","id":11,"type":"ClassNode"},{"methods":"moveDie(DieValue)\nrollRemaining()\nrefresh()\nreturnCombos():List<DiceCombo>\ngetDieValueCount():HashMap<DieValue, Integer>\nisEmpty():boolean\ngetSizeLeft():int\ngetSize():int","name":"DiceSet","x":1510,"y":730,"attributes":"- aDiceRemaining : List<Die>\n- aDiceUsed : List<Die>\n- N_DIE : int\n- DICE_SETS : DiceSet[1]\n- DICE_SETS_DEBUG : DiceSet[1]","id":12,"type":"ClassNode"},{"methods":"","name":"Stop","x":580,"y":920,"attributes":"","id":6,"type":"ClassNode"},{"methods":"","name":"Cloverleaf","x":830,"y":1000,"attributes":"numAchievedTuttos : int","id":8,"type":"ClassNode"},{"methods":"rollDie()\ngetDieValue():DieValue","name":"Die","x":1840,"y":800,"attributes":"# rand : Random\n- aDieValue : DieValue\n- aDebug : boolean","id":13,"type":"ClassNode"}],"edges":[{"startLabel":"","middleLabel":"","start":2,"end":17,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":2,"end":18,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":18,"end":19,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":12,"end":13,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":13,"directionality":"Unspecified","end":14,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":17,"end":19,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"Generalization Type":"Implementation","start":3,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":6,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":4,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":5,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":7,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":8,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":9,"end":0,"type":"GeneralizationEdge"},{"startLabel":"","middleLabel":"","start":10,"end":12,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":10,"end":0,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":11,"directionality":"Unspecified","end":0,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":0,"directionality":"Unspecified","end":20,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":19,"end":20,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"Generalization Type":"Implementation","start":16,"end":15,"type":"GeneralizationEdge"},{"startLabel":"","middleLabel":"","start":2,"end":1,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":11,"directionality":"Unspecified","end":10,"endLabel":"","type":"AssociationEdge"},{"startLabel":"","middleLabel":"","start":2,"end":10,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":2,"end":16,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":10,"end":16,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":12,"directionality":"Unspecified","end":11,"endLabel":"","type":"AssociationEdge"}],"version":"3.4"}
