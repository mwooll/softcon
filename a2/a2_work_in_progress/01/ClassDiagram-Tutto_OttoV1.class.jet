{"diagram":"ClassDiagram","nodes":[{"methods":"roll() (returns ordered list of rolled dice who haven't been used)\nreset() (set used value of all dice to 0, clear usedValues)","name":"Roll (or DiceSet?)","x":900,"y":440,"attributes":"Arraylist<Die>\nArraylist<int> usedValues","id":1,"type":"ClassNode"},{"methods":"validateInput","name":"InputParser","x":1120,"y":200,"attributes":"","id":4,"type":"ClassNode"},{"methods":"","name":"Ruleset <Abstract class>","x":60,"y":330,"attributes":"RuleText\nValidDice\nTuttoCount (normally draw when count on 1, but not always)\nTuttoBonus ","id":8,"type":"ClassNode"},{"methods":"","name":"RuleCard <inherits from Ruleset>","x":130,"y":220,"attributes":"","id":9,"type":"ClassNode"},{"methods":"getScore\nsetScore\n[getStrategy oder so was?]","name":"Player","x":490,"y":420,"attributes":"str Name\nint Score\n","id":5,"type":"ClassNode"},{"methods":"GetRules\ndisplayRules","name":"Card","x":180,"y":60,"attributes":"Name\n","id":10,"type":"ClassNode"},{"methods":"PlayTurn(Player aPlayer, Roll aRoll, Deck aDeck)","name":"Turn","x":90,"y":460,"attributes":"Points\nArraylist<Die> DiceUsed","id":7,"type":"ClassNode"},{"methods":"Shuffle(DiscardPile)\nIsEmpty()\nDrawCard() \n","name":"Deck","x":490,"y":30,"attributes":"DeckSize\nList<Card>\n\n","id":0,"type":"ClassNode"},{"methods":"getNextPlayer()\nisStartingPlayer()","name":"Table","x":730,"y":440,"attributes":"Player startingPlayer\nArraylist<Player> Players","id":11,"type":"ClassNode"},{"methods":"append(Card aCard)\ngetSize() [for debugging only]\ngetAPile() [to reshuffle cards in Deck]\nemty()\n","name":"DiscardPile","x":490,"y":230,"attributes":"Arraylist<Card> aPile\nint PileSize (for testing, invariance. Maybe only in Tests)","id":6,"type":"ClassNode"},{"methods":"rollDie()","name":"Die","x":1120,"y":320,"attributes":"boolean used","id":2,"type":"ClassNode"},{"methods":"addPlayer\nPlayGame","name":"Game","x":900,"y":150,"attributes":"Table\nDeck\nDiscardPile\nRoll\nInputParser","id":3,"type":"ClassNode"}],"edges":[{"Generalization Type":"Inheritance","start":8,"end":9,"type":"GeneralizationEdge"},{"startLabel":"","middleLabel":"","start":3,"end":6,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":3,"end":0,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":3,"end":11,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":3,"end":1,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":3,"end":4,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":11,"end":5,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":0,"end":10,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":10,"end":9,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"startLabel":"","middleLabel":"","start":1,"end":2,"endLabel":"","type":"AggregationEdge","Aggregation Type":"Aggregation"}],"version":"3.4"}
